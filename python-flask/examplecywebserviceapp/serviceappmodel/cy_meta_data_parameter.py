from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from examplecywebserviceapp.serviceappmodel.base_model import Model
from examplecywebserviceapp import util


class CyMetaDataParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name=None, description=None, type=None, value_list=None, default_value=None, validation_type=None, validation_help=None, validation_regex=None, column_type_filter=None, min_value=None, max_value=None):  # noqa: E501
        """CyMetaDataParameter - a model defined in OpenAPI

        :param display_name: The display_name of this CyMetaDataParameter.  # noqa: E501
        :type display_name: str
        :param description: The description of this CyMetaDataParameter.  # noqa: E501
        :type description: str
        :param type: The type of this CyMetaDataParameter.  # noqa: E501
        :type type: str
        :param value_list: The value_list of this CyMetaDataParameter.  # noqa: E501
        :type value_list: List[str]
        :param default_value: The default_value of this CyMetaDataParameter.  # noqa: E501
        :type default_value: str
        :param validation_type: The validation_type of this CyMetaDataParameter.  # noqa: E501
        :type validation_type: str
        :param validation_help: The validation_help of this CyMetaDataParameter.  # noqa: E501
        :type validation_help: str
        :param validation_regex: The validation_regex of this CyMetaDataParameter.  # noqa: E501
        :type validation_regex: str
        :param column_type_filter: The column_type_filter of this CyMetaDataParameter.  # noqa: E501
        :type column_type_filter: str
        :param min_value: The min_value of this CyMetaDataParameter.  # noqa: E501
        :type min_value: float
        :param max_value: The max_value of this CyMetaDataParameter.  # noqa: E501
        :type max_value: float
        """
        self.openapi_types = {
            'display_name': str,
            'description': str,
            'type': str,
            'value_list': List[str],
            'default_value': str,
            'validation_type': str,
            'validation_help': str,
            'validation_regex': str,
            'column_type_filter': str,
            'min_value': float,
            'max_value': float
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'description': 'description',
            'type': 'type',
            'value_list': 'valueList',
            'default_value': 'defaultValue',
            'validation_type': 'validationType',
            'validation_help': 'validationHelp',
            'validation_regex': 'validationRegex',
            'column_type_filter': 'columnTypeFilter',
            'min_value': 'minValue',
            'max_value': 'maxValue'
        }

        self._display_name = display_name
        self._description = description
        self._type = type
        self._value_list = value_list
        self._default_value = default_value
        self._validation_type = validation_type
        self._validation_help = validation_help
        self._validation_regex = validation_regex
        self._column_type_filter = column_type_filter
        self._min_value = min_value
        self._max_value = max_value

    @classmethod
    def from_dict(cls, dikt) -> 'CyMetaDataParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CyMetaDataParameter of this CyMetaDataParameter.  # noqa: E501
        :rtype: CyMetaDataParameter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self) -> str:
        """Gets the display_name of this CyMetaDataParameter.

        Display name for parameter  # noqa: E501

        :return: The display_name of this CyMetaDataParameter.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: str):
        """Sets the display_name of this CyMetaDataParameter.

        Display name for parameter  # noqa: E501

        :param display_name: The display_name of this CyMetaDataParameter.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def description(self) -> str:
        """Gets the description of this CyMetaDataParameter.

        Parameter description  # noqa: E501

        :return: The description of this CyMetaDataParameter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this CyMetaDataParameter.

        Parameter description  # noqa: E501

        :param description: The description of this CyMetaDataParameter.
        :type description: str
        """

        self._description = description

    @property
    def type(self) -> str:
        """Gets the type of this CyMetaDataParameter.

        Type of parameter  # noqa: E501

        :return: The type of this CyMetaDataParameter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this CyMetaDataParameter.

        Type of parameter  # noqa: E501

        :param type: The type of this CyMetaDataParameter.
        :type type: str
        """
        allowed_values = ["text", "dropDown", "radio", "checkBox", "nodeColumn", "edgeColumn", "flag"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value_list(self) -> List[str]:
        """Gets the value_list of this CyMetaDataParameter.

        Values to put into 'dropDown' type field  # noqa: E501

        :return: The value_list of this CyMetaDataParameter.
        :rtype: List[str]
        """
        return self._value_list

    @value_list.setter
    def value_list(self, value_list: List[str]):
        """Sets the value_list of this CyMetaDataParameter.

        Values to put into 'dropDown' type field  # noqa: E501

        :param value_list: The value_list of this CyMetaDataParameter.
        :type value_list: List[str]
        """

        self._value_list = value_list

    @property
    def default_value(self) -> str:
        """Gets the default_value of this CyMetaDataParameter.

        Default value for parameter  # noqa: E501

        :return: The default_value of this CyMetaDataParameter.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value: str):
        """Sets the default_value of this CyMetaDataParameter.

        Default value for parameter  # noqa: E501

        :param default_value: The default_value of this CyMetaDataParameter.
        :type default_value: str
        """

        self._default_value = default_value

    @property
    def validation_type(self) -> str:
        """Gets the validation_type of this CyMetaDataParameter.

        Type of validation to perform  # noqa: E501

        :return: The validation_type of this CyMetaDataParameter.
        :rtype: str
        """
        return self._validation_type

    @validation_type.setter
    def validation_type(self, validation_type: str):
        """Sets the validation_type of this CyMetaDataParameter.

        Type of validation to perform  # noqa: E501

        :param validation_type: The validation_type of this CyMetaDataParameter.
        :type validation_type: str
        """
        allowed_values = ["number", "digits", "string"]  # noqa: E501
        if validation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `validation_type` ({0}), must be one of {1}"
                .format(validation_type, allowed_values)
            )

        self._validation_type = validation_type

    @property
    def validation_help(self) -> str:
        """Gets the validation_help of this CyMetaDataParameter.

        Text to display if validation fails  # noqa: E501

        :return: The validation_help of this CyMetaDataParameter.
        :rtype: str
        """
        return self._validation_help

    @validation_help.setter
    def validation_help(self, validation_help: str):
        """Sets the validation_help of this CyMetaDataParameter.

        Text to display if validation fails  # noqa: E501

        :param validation_help: The validation_help of this CyMetaDataParameter.
        :type validation_help: str
        """

        self._validation_help = validation_help

    @property
    def validation_regex(self) -> str:
        """Gets the validation_regex of this CyMetaDataParameter.

        Regular expression that is applied to parameters of 'type' string  # noqa: E501

        :return: The validation_regex of this CyMetaDataParameter.
        :rtype: str
        """
        return self._validation_regex

    @validation_regex.setter
    def validation_regex(self, validation_regex: str):
        """Sets the validation_regex of this CyMetaDataParameter.

        Regular expression that is applied to parameters of 'type' string  # noqa: E501

        :param validation_regex: The validation_regex of this CyMetaDataParameter.
        :type validation_regex: str
        """

        self._validation_regex = validation_regex

    @property
    def column_type_filter(self) -> str:
        """Gets the column_type_filter of this CyMetaDataParameter.

        Only used for nodes/edges column type. If defined, Cytoscape Web uses it to filter what node/edge columns to display. If omitted, all columns will be listed  # noqa: E501

        :return: The column_type_filter of this CyMetaDataParameter.
        :rtype: str
        """
        return self._column_type_filter

    @column_type_filter.setter
    def column_type_filter(self, column_type_filter: str):
        """Sets the column_type_filter of this CyMetaDataParameter.

        Only used for nodes/edges column type. If defined, Cytoscape Web uses it to filter what node/edge columns to display. If omitted, all columns will be listed  # noqa: E501

        :param column_type_filter: The column_type_filter of this CyMetaDataParameter.
        :type column_type_filter: str
        """
        allowed_values = ["list", "number", "wholenumber", "list_of_number", "list_of_wholenumber", "string", "long", "integer", "double", "boolean", "list_of_string", "list_of_long", "list_of_integer", "list_of_double", "list_of_boolean"]  # noqa: E501
        if column_type_filter not in allowed_values:
            raise ValueError(
                "Invalid value for `column_type_filter` ({0}), must be one of {1}"
                .format(column_type_filter, allowed_values)
            )

        self._column_type_filter = column_type_filter

    @property
    def min_value(self) -> float:
        """Gets the min_value of this CyMetaDataParameter.

        If set and parameter is of type 'number' or 'digits',  values below this should NOT be allowed  # noqa: E501

        :return: The min_value of this CyMetaDataParameter.
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value: float):
        """Sets the min_value of this CyMetaDataParameter.

        If set and parameter is of type 'number' or 'digits',  values below this should NOT be allowed  # noqa: E501

        :param min_value: The min_value of this CyMetaDataParameter.
        :type min_value: float
        """

        self._min_value = min_value

    @property
    def max_value(self) -> float:
        """Gets the max_value of this CyMetaDataParameter.

        If set and parameter is of type 'number' or 'digits',  values above this should NOT be allowed  # noqa: E501

        :return: The max_value of this CyMetaDataParameter.
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value: float):
        """Sets the max_value of this CyMetaDataParameter.

        If set and parameter is of type 'number' or 'digits',  values above this should NOT be allowed  # noqa: E501

        :param max_value: The max_value of this CyMetaDataParameter.
        :type max_value: float
        """

        self._max_value = max_value
