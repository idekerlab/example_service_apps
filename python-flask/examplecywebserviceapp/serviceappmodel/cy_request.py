from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from examplecywebserviceapp.serviceappmodel.base_model import Model
from examplecywebserviceapp import util


class CyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm=None, data=None, parameters=None):  # noqa: E501
        """CyRequest - a model defined in OpenAPI

        :param algorithm: The algorithm of this CyRequest.  # noqa: E501
        :type algorithm: str
        :param data: The data of this CyRequest.  # noqa: E501
        :type data: object
        :param parameters: The parameters of this CyRequest.  # noqa: E501
        :type parameters: Dict[str, str]
        """
        self.openapi_types = {
            'algorithm': str,
            'data': object,
            'parameters': Dict[str, str]
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'data': 'data',
            'parameters': 'parameters'
        }

        self._algorithm = algorithm
        self._data = data
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> 'CyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CyRequest of this CyRequest.  # noqa: E501
        :rtype: CyRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self) -> str:
        """Gets the algorithm of this CyRequest.

        Name of algorithm to run  # noqa: E501

        :return: The algorithm of this CyRequest.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm: str):
        """Sets the algorithm of this CyRequest.

        Name of algorithm to run  # noqa: E501

        :param algorithm: The algorithm of this CyRequest.
        :type algorithm: str
        """

        self._algorithm = algorithm

    @property
    def data(self) -> object:
        """Gets the data of this CyRequest.

        data as json fragment  # noqa: E501

        :return: The data of this CyRequest.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data: object):
        """Sets the data of this CyRequest.

        data as json fragment  # noqa: E501

        :param data: The data of this CyRequest.
        :type data: object
        """

        self._data = data

    @property
    def parameters(self) -> Dict[str, str]:
        """Gets the parameters of this CyRequest.

        Optional parameters in simple map format arg: value  # noqa: E501

        :return: The parameters of this CyRequest.
        :rtype: Dict[str, str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: Dict[str, str]):
        """Sets the parameters of this CyRequest.

        Optional parameters in simple map format arg: value  # noqa: E501

        :param parameters: The parameters of this CyRequest.
        :type parameters: Dict[str, str]
        """

        self._parameters = parameters
