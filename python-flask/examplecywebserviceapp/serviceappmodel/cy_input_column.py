from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from examplecywebserviceapp.serviceappmodel.base_model import Model
from examplecywebserviceapp import util


class CyInputColumn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, description=None, column_name=None, data_type=None, allow_multiple_selection=None, default_column_name=None):  # noqa: E501
        """CyInputColumn - a model defined in OpenAPI

        :param name: The name of this CyInputColumn.  # noqa: E501
        :type name: str
        :param description: The description of this CyInputColumn.  # noqa: E501
        :type description: str
        :param column_name: The column_name of this CyInputColumn.  # noqa: E501
        :type column_name: str
        :param data_type: The data_type of this CyInputColumn.  # noqa: E501
        :type data_type: str
        :param allow_multiple_selection: The allow_multiple_selection of this CyInputColumn.  # noqa: E501
        :type allow_multiple_selection: bool
        :param default_column_name: The default_column_name of this CyInputColumn.  # noqa: E501
        :type default_column_name: str
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'column_name': str,
            'data_type': str,
            'allow_multiple_selection': bool,
            'default_column_name': str
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'column_name': 'columnName',
            'data_type': 'dataType',
            'allow_multiple_selection': 'allowMultipleSelection',
            'default_column_name': 'defaultColumnName'
        }

        self._name = name
        self._description = description
        self._column_name = column_name
        self._data_type = data_type
        self._allow_multiple_selection = allow_multiple_selection
        self._default_column_name = default_column_name

    @classmethod
    def from_dict(cls, dikt) -> 'CyInputColumn':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CyInputColumn of this CyInputColumn.  # noqa: E501
        :rtype: CyInputColumn
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this CyInputColumn.

        The label text of the dropdown list. It will also be used as the column name in the generated data block.  # noqa: E501

        :return: The name of this CyInputColumn.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CyInputColumn.

        The label text of the dropdown list. It will also be used as the column name in the generated data block.  # noqa: E501

        :param name: The name of this CyInputColumn.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this CyInputColumn.

        A short description of the column. Used as a hint in the UI.  # noqa: E501

        :return: The description of this CyInputColumn.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this CyInputColumn.

        A short description of the column. Used as a hint in the UI.  # noqa: E501

        :param description: The description of this CyInputColumn.
        :type description: str
        """

        self._description = description

    @property
    def column_name(self) -> str:
        """Gets the column_name of this CyInputColumn.

        Name of the column that should be automatically included. No UI control will be generated for this column. Treated like a preselected value for name attribute.  # noqa: E501

        :return: The column_name of this CyInputColumn.
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name: str):
        """Sets the column_name of this CyInputColumn.

        Name of the column that should be automatically included. No UI control will be generated for this column. Treated like a preselected value for name attribute.  # noqa: E501

        :param column_name: The column_name of this CyInputColumn.
        :type column_name: str
        """

        self._column_name = column_name

    @property
    def data_type(self) -> str:
        """Gets the data_type of this CyInputColumn.

        Data type of the attribute. When defined, Cytoscape Web uses it to filter the dropdown list. If omitted, the dropdown will contain all columns.  # noqa: E501

        :return: The data_type of this CyInputColumn.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type: str):
        """Sets the data_type of this CyInputColumn.

        Data type of the attribute. When defined, Cytoscape Web uses it to filter the dropdown list. If omitted, the dropdown will contain all columns.  # noqa: E501

        :param data_type: The data_type of this CyInputColumn.
        :type data_type: str
        """
        allowed_values = ["list", "number", "wholenumber", "list_of_number", "list_of_wholenumber", "string", "long", "integer", "double", "boolean", "list_of_string", "list_of_long", "list_of_integer", "list_of_double", "list_of_boolean"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def allow_multiple_selection(self) -> bool:
        """Gets the allow_multiple_selection of this CyInputColumn.

        When set to true, all selected columns in the dropdown will be used to serialize the data, otherwise only one column can be selected  # noqa: E501

        :return: The allow_multiple_selection of this CyInputColumn.
        :rtype: bool
        """
        return self._allow_multiple_selection

    @allow_multiple_selection.setter
    def allow_multiple_selection(self, allow_multiple_selection: bool):
        """Sets the allow_multiple_selection of this CyInputColumn.

        When set to true, all selected columns in the dropdown will be used to serialize the data, otherwise only one column can be selected  # noqa: E501

        :param allow_multiple_selection: The allow_multiple_selection of this CyInputColumn.
        :type allow_multiple_selection: bool
        """

        self._allow_multiple_selection = allow_multiple_selection

    @property
    def default_column_name(self) -> str:
        """Gets the default_column_name of this CyInputColumn.

        (Optional) The default selection in the column name dropdown. If the column specified in field doesn't exist in node or edge table, no selection will be make.  # noqa: E501

        :return: The default_column_name of this CyInputColumn.
        :rtype: str
        """
        return self._default_column_name

    @default_column_name.setter
    def default_column_name(self, default_column_name: str):
        """Sets the default_column_name of this CyInputColumn.

        (Optional) The default selection in the column name dropdown. If the column specified in field doesn't exist in node or edge table, no selection will be make.  # noqa: E501

        :param default_column_name: The default_column_name of this CyInputColumn.
        :type default_column_name: str
        """

        self._default_column_name = default_column_name
